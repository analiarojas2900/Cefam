# Generated by Django 4.0.4 on 2022-05-10 00:34

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Medicamento',
            fields=[
                ('id_medicamento', models.AutoField(primary_key=True, serialize=False)),
                ('nombre_medicamento', models.CharField(max_length=25)),
                ('fecha_elab_medicamento', models.DateField()),
                ('fecha_venc_medicamento', models.DateField()),
                ('cantidad_medicamento', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('run_paciente', models.IntegerField(primary_key=True, serialize=False)),
                ('dv_paciente', models.IntegerField()),
                ('nombre_paciente', models.CharField(max_length=25)),
                ('apellido_paciente', models.CharField(max_length=25)),
                ('edad_paciente', models.IntegerField()),
                ('sexo_paciente', models.CharField(max_length=1)),
                ('direccion_paciente', models.CharField(max_length=60)),
                ('mail_paciente', models.CharField(max_length=25)),
                ('numero_telefonico', models.CharField(max_length=12)),
                ('img_paciente', models.ImageField(null=True, upload_to='img_paciente')),
            ],
        ),
        migrations.CreateModel(
            name='Personal',
            fields=[
                ('id_personal', models.AutoField(primary_key=True, serialize=False)),
                ('run_personal', models.IntegerField()),
                ('dv_personal', models.IntegerField()),
                ('nombre_personal', models.CharField(max_length=25)),
                ('apellido_personal', models.CharField(max_length=25)),
                ('mail_personal', models.EmailField(max_length=254)),
                ('sexo_personal', models.CharField(max_length=1)),
                ('edad_personal', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Receta_medica',
            fields=[
                ('id_receta', models.AutoField(primary_key=True, serialize=False)),
                ('prescripcion_receta', models.TextField(max_length=200)),
                ('fecha_receta', models.DateField()),
                ('id_medicamento', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='polls.medicamento')),
                ('id_medico', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='polls.personal')),
                ('run_paciente', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='polls.paciente')),
            ],
        ),
        migrations.CreateModel(
            name='Ficha_paciente',
            fields=[
                ('id_ficha', models.AutoField(primary_key=True, serialize=False)),
                ('fecha_retiro', models.DateField()),
                ('id_receta', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='polls.receta_medica')),
                ('run_paciente', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='polls.paciente')),
            ],
        ),
        migrations.CreateModel(
            name='Entrega_medicamentos',
            fields=[
                ('id_entrega', models.AutoField(primary_key=True, serialize=False)),
                ('cantidad_entregada', models.IntegerField()),
                ('id_farmaceutico', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='polls.personal')),
                ('id_ficha', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.ficha_paciente')),
                ('id_receta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.receta_medica')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
